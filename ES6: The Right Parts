ES6: The Right Parts
Kyle Simpson
@getify

-Maker Square (Hack Reactor)
-Youdontknowjs.com

old ways of doing things. just improving it.
imperative - tells the computer how to solve the problem
delcatrive - tells the computer how to get to the right answer and it finds how to solve it best

JS is trying to become more declaritive.

Basics
//block scoping

iify (immeditaly invoked function )

var x = 2;

//not pollupting the scope!
//creating scope within scope
(function bob(){
	var x = 10;
	console.log(x);	
})();


console.log(x); //2


var x = 2;
{
	let x = 10;
	console.log(x);
}
console.log(x); //2




function diff(x,y){

//not all vars shouldbe let
//lets are supposed to be about blocks only
//vars are supposeed to be used everywhere

	if(x>y){
		let tmp = y; //let keyword allows reference to tmp only to exist in block, enforcing sytleistic patterns
		y = x;
		x = tmp;
	}
	return y-x;
}


//let should only be used in blocks. Having it everywhere creates more mental tasks
//TDZ tepmoral dead zone.
//point in time from opening of scope to let declartion, that varaible exists in non-defined state
//all scopes should be explict


fucntion foo(){
	if(x){
		{ //extra brackets to create explict scope. if you don't then scope is implict and you can run into TDZ issues
			let y,z; //explict scope! 
			y  = x * 2;

		}
	}
}




//const

//has TDZ
//has block scope
//can't reassign!

function foo() {
	const x = 2;
	x = 3; //ERROR. Can't do that

}


function foo() {
	
	const x = [2]; //creates unreassigned variable!

	x[0] = 1; //this won't throw an error because its x that is unreassigned. the value itself can change (because its an array) the type cannot  change. 

	var x = Object.freeze([2,3,4]); ///makes the value immutable. 
	//object.freeze - use strict mode! trying to change cvalue would thow an error. in unstrict mode would not cause error

}

function foo(){
	const PORT = 12; //value is mutable, type is not
}


//use Var first
//use let when you do block scoping explictly
//once in a while.. you can use const



//*************** 

function sum(a,b,c) {
	console.log(a + b + c);
}

	sum(3,4,5); //12

var nums = [4,5,6];
sums.apply(null,num); //will spread out array to position to arguments, old school way (only on arays)

sum(...nums); //... takes value that is itterable that spreads it out. ES6 (any itterators)

var arr = [1,2,3];
var arr2 = [4,5,6];

var arr3 = [0].concat(arr1, arr2,[7,8,9]); //old way

var arr3 = [0, ...arr1, ...arr2, 7,8,9]; //ES6 ... = 'spreadable'

function foo(x,y) {
	var rest = [].slice.call(arguments, 2);
	console.log(x,y,rest);
}
foo(1,2,3,4,5); //1 2 [3,4,5]


function foo(...args){
	console.log(args); //the ... as the gatherer has to be at the end
	
}
foo(1,2,3,4,5); //[1,2,3,4,5]


function foo(x,y) {
	x = (x !==undefined) ? x: 10;
	y = (y !== undefined) ? y :42;
	console.log(x,y);
}
foo(1,3); //1 3
foo (0,0 ); //0 0 


DEFAULTS WIHT ES6
function foo(x = 10, y = 42){
	console.log(x,y);
}

foo(undefined); //10 42
foo(null); //null 42
foo(...[]); //10 42
foo(...[,,,]); //10 42
foo(...[3,5]); //3 5



function bar() {
	return 10;
}
function baz() {
	return 42;
}

function foo(x = bar(), y =baz()){
	console.log(x,y);
}

//default value expressions are lazy expressions
//only are going to execute when they are needed

//default parameters have so many corner cases


function foo(
	x = function() {return y;},
	y = 42;	
)
{
	console.log(x(),y);
}
foo(); 



//***** Destructuring ***//
function foo() {
	return [1,2,3];
}
//old way
var tmp = foo(), 
x = tmp[0],
y = temp[1],
z = tmp[2];

//new way
var [a,b,c] = [1,2,3]; .//pattern for assignments show up in L values
 or

 var [x,y,z] = foo();
 console.log(x,y,z);
 if have less values than position.. last ones get thrown away
 if have more vallues than position.. last ones get 'undefined'


 var [x,y,...rest] = foo(); //... must be at end of list
 console.log(x,y, rest); //1 2 [3]



function foo() {
	return {
		x: 1,
		y : 2,
		z: 3
	};
}

var {
	x : x,
	y: y,
	z:z
} = foo();
//if mssing properties they become undefined

console.log(x,y,z); //1 2 3

if property name and value name are the same you don't have to list them twice. 
ie: x: x == x //the :x is the part removed

var {
	x,
	y :  Y,
	x
} = foo();
consoel.log(y, Y); //2

x = {
	a: 1,
	b: 2,
	c: 3
}
prop: value

{
	a: varA,
	b: varB
	c: varC
} = x
prop: variable


destruction = pattern assignment

function foo() {
	return [1,3,4];
}
var x,y,z;
[x,y,z] = foo();

var o = {};
[o.x,o.y,o.z] = foo();

function foo(){
	return {
	a:1,
	b:2, c:3
	};
}
var o = {}
({
	a: o.x,
	b: o.y,
	c: o.z
} = foo()); //have to add () when there is no declartive and it's an object. otherwise js will think it is  block scope 

function foo(){
	return [1,2];
}
var [
	x,
	y,
	z = 12 //z will be 12 because it will be the default value
] = foo();

function foo() {
	return {
		a:1,
		c:2
	};
}
var{
	a:x,
	b:y = 12 //with desruction you can assign values with default
	c:z
} = foo();

//defaulst can go in array postions or object properties assignemnts

//destruction is senstive to return type value
if null is return we get run time error

function foo(){ return null;}

var {
	a: x,
	b: y =12;
	c:z
} = foo() || {}; //default value


var [
	x,
	12,
	z
] = foo() || []; //default value this is safe!


function parameters can be descturcted too
function foo( {
	x:y
})
{console.log(y);}
foo({x:2});

//good practice to have empty value of type set for defaut!
function foo([x = 10,y = 12,z = 14] = []) //default paramater values protects against array destruction
{
	console.log(y);
}
foo(); //10 12 14
foo([]); //10 12 14
foo([1,2]) //1 2 14

function foo({x,y,z,w,r,f}){
	//..
}
foo({r:2, w:1, f:3});

//can use named arguents
//this only works withh destructuring the parameters


//destruction can occur on nesting!
function foo() {
	return [
		[1,2,3],
		[4,5,6],
		[7,8,9]
		];
}

var [
	[..,x],
	[],
	[y,z]
] = foo();

console.log(x,y,z); //3 7 8

function foo(){
	return {
		x: [1,2,3],
		y: [{
			z:[4,5]
		}],
		z:6
	};
}

var {
	x: [X1, X2] = [],
	y:[
		{
			z: [Z1 = 3, Z2] = []
		}
	] = [],
	z: Z3
} = foo() || {};

console.log(X1, X2, Z1, Z2, Z3) // 1 2 4 5 6
//remember to use defaults


//****** Destructing and Restructuring *********//
var defaults = {
	foo: 2,
	bar: {
		baz: 6,
		bam: "hello"
	}
};

var config = {
	bar: {
		bam: "HELLO"
	}
};

{
	//destructing
	let {
		foo = defaults.foo,
		bar: {
			baz = defaults.bar.baz,
			bam = defaults.bar.bam
		}
	} = config;

	//restructure 
	config = {
		foo, 
		bar: {
			baz,
			bam
		}
	};





}



var x = 2, obj, z = "xyz";
obj = {
	x,
	y(){..} //concise methods
	[z] //becomes property name, can be any expression in js :42,
	[x](){..},
	*foo(){..}//
	*[x](){..}
	get bar() {return this.__bar;}//getter method
	set bar(b) {this.__bar =b;} //setter has to have min one parameter name

};
obj[x]();

//arrow methods cannnot be concise


var 01 = {
	foo: 10
};
var o2 = Object.create(o1);
o2.foo; //10 o2 delegates to o1

//now in es6
o2 = {
	__proto__: o1 //must be static __proto__ or "__proto__"//can't be polyfilled or transpiled
	//or
	..
};

Object.setProptotypeOf(o2,o1);
 //or

 var o2 = Object.assign(Objet.create(o1), { //this can be polyfilled and transpiled
 	..
 }); //creates the linkage

var o2 = {
	__proto__:o1,
	bar(){
		console.log(super.bar); //super is not dynamically bound
	}
}


Template Literal === Interpolated String Literal
//old
var name = "Kyle", title = "Teacher";
var msg = "Hello," + name + ", you are the " + title + "!";

//new
var msg = `Hello, ${name}, you are the ${title}!`;

console.log(msg);

any valid JS expression inbetween {} 
multi-string
var x = "Hello, this is a really long sentence that I\
	really would like to be able\
	to break onto\
	multiple lines."

	var msg = `Hello, ${name},
	you are
	the ${title}!`; //this creates a multi-string

//tagged template literals === Tagged Intepolated String Literal

var msg = foo`Hello, ${name}`; //foo is calling a function

function foo() { 

return 'haha, gotcha';

}
msg;//haha, gotcha

function foo(strings,...values){ //strings ==== all the parts that are not interpolated
	console.log(strings);
	// ["Hello, ", ", you are the ", "!"]

	console.lg(values);
	// ["Kyle", "Teacher"]; //there will always be a minium of 1 string more than values

	var str = "";
	for(var i = 0; i < strings.length; i ++){
	if( i >0) str += values[i-1];
	str += strings[i];
	}
	return str;
}


function foo(strings, ...values){
	console.log(strings.raw);
	//will give you unparsed/processed version of the string
}



SYMBOLS
var a = Symbol("dsjflskj");
a; //Symbol()
you can't see the value


var obj = {};
only time you'll use a symbol is as property of an obj
obj[a] = 42;
console.log(obj[a]); //42

Object.getOwnPropertySymbols(obj);


//WELL KNOWN SYMBOLS (WKS)

var obj = {};
obj[ Symbol.toStringTag];
"[object Object]"

var obj = {};
obj[Symbol.toStringTag] = function(){};
//@@ToStringTag
customize an objects stringifaction function with my own custom one

var a = [1,2,3];
var b = "abc";
iterable
accessing one item of a var at a time

var it_a = a[Symbol.iterator]();
var it_b = b[Symbol.iterator]();

it_a.next(); //{value:1, done: false}
it_a.next();//{value: 3, done: false}
it_a.next(); //{value: 3, done: false}
it_a.next(); //{value:undefined, done: true}

it_b.next(); //{value: a, done: false}

*****OR***
for(var i=0; i<a.length; i++){
	console.log(a[i]);
}

for(var i in a) { //for in is not supposed to on arrays only on objects
	console.log(a[i]);
}


*** new es6 hotness***
for (var v of a){
	console.log(v);
}
//1 2 3 


b[Symbol.iterator] = function(){
	var context = this, idx = 0;
	return {
		next() {
			if(idx <context.length){
				return { value: context[idx++], done:false };
			}
			else{
				return {done : true};
			}
		}
	}
};


//nik
var obj = {
	[Symbol.iterator]: function() {..},
	a:2,
	b:3,
	c:4	
};

for(var v of obj){
	console.log(v);
	//objects don't have iterators as they come. we can create our own iterator for the object
	using the Symbol.iterator
}
 ******GENERATORS**********
//does not have run to completetion 


 function *foo() {
 	console.log(42);
 	 console.log(420);
 	 console.log(4200);
 	 yield; //tells the generator to pause 
 	 console.log(42000);
 };

//generator creates an iterator.
//the iterator is then what we use to control the generator
 var it = foo();
 it.next();
//42 420 4200
it.next(); //resume the generator where we left off
//42000


function *foo(){
	yield 1;
	yield 2;
	yield 3;
	return 4
}

var it = foo();
it.next() // {value: 1, done: false}
it.next() // {value: 2, done: false}
it.next() // {value: 3, done: false}
it.next() // {value: 4 done: true}

//generator that is 'done' is fully complete. no more actions

for(var v of foo()){
	console.log(v);
}
//1 2 3
//have to be careful with returns, because if someone tries to consume it - it'll get lost with the generator

var b = "abc";
b[Symbol.itertor] = function *(){
	var idx = 0;
	while(idx < this.length){
		yield this[idx++];
	}
}

******  MAP  ********

var b = new Map();
var k1 = [1,2,3];
var k2 = [4,5,6];
var v1 = "hello";
var v2 = "world";

b.set(k1,v1);
b.keys() //gives itertor of keys
b.values() //gives itertor of values

for(var key of b.keys()){
	console.log(key);
}
//[1,2,3] [4,5,6]

for(var v of b.values()){
	console.log(v);
//"hello" "world"

//enteies iterator give us key: value

for(var e of b.entries()){
	console.log(e);
}
//[1,2,3] , "hello"
//[4,5,6], "world"

for(var [key, value] of b.entries()){
	console.log(key, value);
}


***** ARROW FUNCTIONS *****

[1,2,3,4,5].map(function double(v){return v * 2})'
//[2,4,5,6, 8 , 10]

[1,2,3,4,5].map(v => v*2);
//has to be one paramter, and only one expression to return in the body
//[2,4,6,8,10]

//arrow functions are annoyomous
// stack trace debugging shows 'annoymous'

const y = x => x*2;
if you assign an annoyomouse function to a variable, the variable will be named with the issue

so to get the function to describe
const doubler = x => x*2;
[1,2,3,4,5].map(doubler);
//does not support defaults without ()
 ...(x=10)=>x*2
 //has to be a  placeholder param
//if muliptle params have to have them wrapped in ()

//to return an object must have to wrap object in ()
const double = (x,y) => ({a: x*2});
const oubler = (x,y) => {if (x) console.log(x); return x;}
//if there is more than the one staremet have to use {} around and then add back in RETURN

//when to use the arrow function

var obj = {
	id: 'foo',
	bar() {
		setTimeout(function(){
			console.log(this.id)
		}.bind(this),100);
	}
};

obj.bar();

//has no 'this' binding at all!
//inside => use lexical look ups

var obj = {
	id: 'foo',
	bar() {
		setTimeout(() =>{
			console.log(this.id)
		},100);
	}
};
